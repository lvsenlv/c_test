/*************************************************************************
	> File Name: log.c
	> Author: 
	> Mail: 
	> Created Time: 2016年12月08日 星期四 16时21分58秒
 ************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/stat.h>
//#include <time.h>
#include "log.h"

static void before_main(void) __attribute__((constructor));
static char g_log_name[LOG_NAME_LEN] = {0};
FILE *g_log_file = NULL;

void before_main(void)
{


}

int log_init(void)
{
	unsigned int log_level = 0;
	int ret = get_log_level(&log_level);
	if (LEVEL_ERROR == log_level)
	{
		printf("Do not use log \n");
		return 0;
	}

	char log_path[LOG_PATH_LEN] = {0};
	if (get_log_path(log_path, sizeof(log_path)))
	{
		perror("failed to init log");
		return -1;
	}

	snprintf(g_log_name, sizeof(g_log_name), "%s/test.log", log_path);
	log_check();

	g_log_file = fopen(g_log_name, "a+");
	if ( !g_log_file )
	{
		perror("faild to init log");
		return -1;
	}

	if (setvbuf(g_log_file, (char *) NULL, _IONBF, 0))
	{
		LOG(LEVEL_ERROR, "setvbuf error");
		return -1;
	}

	return 0;
	
}

int get_log_level(unsigned int * ptr)
{
	if (LOG_CONF_CHECK)
	{
		return -1;
	}

	FILE *fp = popen("cat conf/log.conf | grep LOG_LEVEL", "r");
	if ( !fp )
	{
		perror("popen");
		pclose(fp);
		return -1;
	}

	char buf[LOG_BUF_LEN] = {0};
	char temp[3] = {0};
	int ret = -1;
	if ( !feof(fp) && fgets(buf, sizeof(buf), fp))
	{
		if (1 != sscanf(buf, "%*[^=]=%[^ /r/t/n]", temp))
		{
			perror("get log level");
			ret = -1;
		}
		else
		{
			*ptr = atoi(temp);
			ret = 0;
		}
	}
	else
	{
		printf("failed to get log level int log.conf \n");
		ret = -1;
	}

	pclose(fp);
	return ret;
}

int get_log_path(char *path, unsigned int len)
{
	if (LOG_CONF_CHECK)
	{
		return -1;
	}

	FILE *fp = popen("cat conf/log.conf | grep LOG_DIR", "r");
	if ( !fp )
	{
		perror("popen");
		pclose(fp);
		return -1;
	}

	char buf[LOG_PATH_LEN+1] = {0};
	char temp[LOG_PATH_LEN] = {0};  
	int ret = -1;
	if ( !feof(fp) && fgets(buf, sizeof(buf), fp))
	{
		if(1 != sscanf(buf, "%*[^=]=%[^ \t\r\n]", temp))
		{
			perror("get log path");
			ret = -1;
		}
		else
		{
			snprintf(path, len, "%s", temp); // could not use sizeof(path), path is a pointer, only 4 bytes
			ret = 0;
		}
	}
	else
	{
		printf("failed to get log path in log.conf \n");
		ret = -1;
	}
	
	pclose(fp);
	return ret;
}

int log_check(void)
{
	if(access(g_log_name, F_OK))
	{
		return 0;
	}
	struct stat st;
	if (stat(g_log_name, &st))
	{
		perror("stat g_log_name");
		return -1;
	}

	if (st.st_size >= LOG_SIZE)
	{
		char cmd[LOG_BUF_LEN] = {0};
		snprintf(cmd, sizeof(cmd), ">%s", g_log_name);
		return system(cmd);
	}

	return 0;
}



